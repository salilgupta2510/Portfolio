{"version":3,"sources":["docs/Salil_Gupta_19062020.pdf","App.js","components/projects.js","serviceWorker.js","index.js"],"names":["module","exports","App","shareUrl","title","console","log","window","location","className","id","params","styleParams","steps","loop","Infinity","wrapper","exact","to","FacebookShareButton","url","quote","FacebookIcon","size","round","WhatsappShareButton","WhatsappIcon","TwitterShareButton","TwitterIcon","EmailShareButton","EmailIcon","particles","number","value","interactivity","events","onhover","enable","mode","Projects","props","href","PDF","download","Boolean","hostname","match","ReactDOM","render","history","browserHistory","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c3761c16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Salil_Gupta_19062020.12c7c3de.pdf\";","import React from \"react\";\nimport Typical from \"react-typical\";\nimport { NavLink } from \"react-router-dom\";\nimport Particles from \"react-particles-js\";\nimport {\n  TwitterIcon,\n  TwitterShareButton,\n  WhatsappIcon,\n  WhatsappShareButton,\n  FacebookShareButton,\n  FacebookIcon,\n  EmailShareButton,\n  EmailIcon,\n} from \"react-share\";\nimport \"./App.css\";\n\nfunction App() {\n  const shareUrl = \"https://salilgupta2510.github.io/Portfolio\";\n  const title = \"SalilGupta\";\n  console.log(window.location)\n  return (\n    <div className=\"App\">\n      <section id=\"home\" className=\"main-home parallax-section\">\n        <div className=\"overlay\"></div>\n        <Particles className=\"backgroundApp\" params={styleParams} />\n        <div className=\"name-container\">\n          <h2 className=\"name-heading\">Hi, I'm Salil Gupta</h2>\n          <div className=\"col-md-12 col-sm-12\">\n            <Typical\n              className=\"name-heading\"\n              steps={[\n                `I'm a Front End Developer`,\n                1000,\n                `I develop Web & Mobile applications`,\n                1000,\n              ]}\n              loop={Infinity}\n              wrapper=\"p\"\n            />\n          </div>\n        </div>\n        <div className={\"additional\"}>\n          <div className=\"col-md-12 col-sm-12\">\n            <NavLink className=\"nav-link\" exact to=\"/Projects\">\n              Know More &gt;\n            </NavLink>\n          </div>\n          <div className=\"share-button-container\">\n            <FacebookShareButton\n              url={shareUrl}\n              quote={title}\n              className=\"Demo__some-network__share-button added-style-share-button\"\n            >\n              <FacebookIcon size={32} round />\n            </FacebookShareButton>\n            <WhatsappShareButton\n              url={shareUrl}\n              quote={title}\n              className=\"Demo__some-network__share-button added-style-share-button\"\n            >\n              <WhatsappIcon size={32} round={true} />\n            </WhatsappShareButton>\n            <TwitterShareButton\n              url={shareUrl}\n              quote={title}\n              className=\"Demo__some-network__share-button added-style-share-button\"\n            >\n              <TwitterIcon size={32} round={true} />\n            </TwitterShareButton>\n            <EmailShareButton\n              url={shareUrl}\n              quote={title}\n              className=\"Demo__some-network__share-button added-style-share-button\"\n            >\n              <EmailIcon size={32} round={true} />\n            </EmailShareButton>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n\nconst styleParams = {\n  particles: {\n    number: {\n      value: 100,\n    },\n    size: {\n      value: 5,\n    },\n  },\n  interactivity: {\n    events: {\n      onhover: {\n        enable: true,\n        mode: \"repulse\",\n      },\n    },\n  },\n};\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport PDF from \"../docs/Salil_Gupta_19062020.pdf\";\nimport \"./projects.css\";\n\nfunction Projects(props) {\n  return (\n    <div className=\"Project\">\n      <div className=\"container\">\n        <header className=\"container-header\">\n          <h2 className=\"page-heading\"> Previous Projects </h2>\n          <NavLink className=\"navlink-home\" to=\"/Portfolio\">\n            {\" \"}\n            Home{\" \"}\n          </NavLink>\n          <a className=\"download-resume\" href={PDF} download>\n            {\" \"}\n            Download Resume\n          </a>\n        </header>\n        <div className=\"project-container\">\n          <h3 className=\"project-type-name\"> Mobile App (Android/iOS) </h3>\n          <div className=\"type-react-native\">\n          <div className=\"col-md-6 project-item\">\n              <h3 className=\"project-heading\"> COVID19 Tracker APP</h3>\n              <p className=\"project-details\">\n                This app is developed using React Native library for iOS &\n                Android platform. This app features Geo-Fencing, Contact-Tracing, Symptoms assessments.\n                It is being used by on of the country in Africa. Due to signed NDA, no app identifying \n                info available. TechStack: React-Native.\n              </p>\n            </div>\n            <div className=\"col-md-6 project-item\">\n              <h3 className=\"project-heading\"> Scan by QR </h3>\n              <p className=\"project-details\">\n                This app is developed using React Native library for iOS &\n                Android platform. The main idea behind this app is to enable the\n                use to share any scanned QR over various types of mediums such\n                as via sms, whatsapp, e-mail etc. TechStack: React-Native.\n              </p>\n            </div>\n            <div className=\"col-md-6 project-item\">\n              <h3 className=\"project-heading\"> Scheduling Application </h3>\n              <p className=\"project-details\">\n                This app is developed using React Native library for iOS &\n                Android platform. This is a scheduling application used by one\n                of the largest Gas & Oil company in Canada. This helps\n                scheduling the the load/unload of the oil from the facilities.\n                TechStack: React-Native, Node, Parse Query Javascript, Azure.\n              </p>\n            </div>\n          </div>\n          <h3 className=\"project-type-name\"> Web Application </h3>\n          <div className=\"type-react-native\">\n            <div className=\"project-item\">\n              <h3 className=\"project-heading\"> Release Automation Dashboard</h3>\n              <p className=\"project-details\">\n                This dashboard provides functionality to trigger services on\n                jenkins used for triggering the automated release process of an\n                ecommerce website. TechStack: React Javascript, Node, Azure.\n              </p>\n            </div>\n            <div className=\"project-item\">\n              <h3 className=\"project-heading\">\n                {\" \"}\n                Predictive Analytics Dashboard{\" \"}\n              </h3>\n              <p className=\"project-details\">\n                This dashboard provides excel like functionality using Ag-Grid\n                library. TechStack: React Javascript, Node, Ag-Grid, Azure.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Projects;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Projects from \"./components/projects\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { browserHistory } from \"react-router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router history={browserHistory}>\n    <Switch>\n      <Route exact path=\"/Portfolio\" component={App} />\n      <Route path=\"/Projects\" component={Projects} />\n    </Switch>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}